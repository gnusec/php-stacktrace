/* automatically generated by rust-bindgen */

#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, unused)]

pub type ulong = ::std::os::raw::c_ulong;
pub type uint = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type zend_bool = ::std::os::raw::c_uchar;
pub type zend_uchar = ::std::os::raw::c_uchar;
pub type zend_uint = ::std::os::raw::c_uint;
pub type zend_ulong = ::std::os::raw::c_ulong;
pub type zend_object_handle = ::std::os::raw::c_uint;
pub type zend_object_handlers = _zend_object_handlers;
pub type zval = _zval_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_value {
    pub handle: zend_object_handle,
    pub handlers: *const zend_object_handlers,
}
pub type zend_object_value = _zend_object_value;
pub type dtor_func_t =
    ::std::option::Option<unsafe extern "C" fn(pDest: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bucket {
    pub h: ulong,
    pub nKeyLength: uint,
    pub pData: *mut ::std::os::raw::c_void,
    pub pDataPtr: *mut ::std::os::raw::c_void,
    pub pListNext: *mut bucket,
    pub pListLast: *mut bucket,
    pub pNext: *mut bucket,
    pub pLast: *mut bucket,
    pub arKey: *const ::std::os::raw::c_char,
}
pub type Bucket = bucket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hashtable {
    pub nTableSize: uint,
    pub nTableMask: uint,
    pub nNumOfElements: uint,
    pub nNextFreeElement: ulong,
    pub pInternalPointer: *mut Bucket,
    pub pListHead: *mut Bucket,
    pub pListTail: *mut Bucket,
    pub arBuckets: *mut *mut Bucket,
    pub pDestructor: dtor_func_t,
    pub persistent: zend_bool,
    pub nApplyCount: ::std::os::raw::c_uchar,
    pub bApplyProtection: zend_bool,
}
pub type HashTable = _hashtable;
pub type zend_class_entry = _zend_class_entry;
pub type zend_object_read_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        key: *const _zend_literal,
    ) -> *mut zval,
>;
pub type zend_object_read_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> *mut zval,
>;
pub type zend_object_write_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        value: *mut zval,
        key: *const _zend_literal,
    ),
>;
pub type zend_object_write_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, offset: *mut zval, value: *mut zval),
>;
pub type zend_object_get_property_ptr_ptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        key: *const _zend_literal,
    ) -> *mut *mut zval,
>;
pub type zend_object_set_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut *mut zval, value: *mut zval)>;
pub type zend_object_get_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut zval>;
pub type zend_object_has_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        has_set_exists: ::std::os::raw::c_int,
        key: *const _zend_literal,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_has_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        check_empty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_unset_property_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, member: *mut zval, key: *const _zend_literal),
>;
pub type zend_object_unset_dimension_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, offset: *mut zval)>;
pub type zend_object_get_properties_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut HashTable>;
pub type zend_object_get_debug_info_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, is_temp: *mut ::std::os::raw::c_int) -> *mut HashTable,
>;
pub type zend_object_call_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        method: *const ::std::os::raw::c_char,
        ht: ::std::os::raw::c_int,
        return_value: *mut zval,
        return_value_ptr: *mut *mut zval,
        this_ptr: *mut zval,
        return_value_used: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        object_ptr: *mut *mut zval,
        method: *mut ::std::os::raw::c_char,
        method_len: ::std::os::raw::c_int,
        key: *const _zend_literal,
    ) -> *mut _zend_function,
>;
pub type zend_object_get_constructor_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut _zend_function>;
pub type zend_object_add_ref_t = ::std::option::Option<unsafe extern "C" fn(object: *mut zval)>;
pub type zend_object_del_ref_t = ::std::option::Option<unsafe extern "C" fn(object: *mut zval)>;
pub type zend_object_clone_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> zend_object_value>;
pub type zend_object_get_class_entry_t =
    ::std::option::Option<unsafe extern "C" fn(object: *const zval) -> *mut zend_class_entry>;
pub type zend_object_get_class_name_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *const zval,
        class_name: *mut *const ::std::os::raw::c_char,
        class_name_len: *mut zend_uint,
        parent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_compare_t = ::std::option::Option<
    unsafe extern "C" fn(object1: *mut zval, object2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_compare_zvals_t = ::std::option::Option<
    unsafe extern "C" fn(resul: *mut zval, op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_cast_t = ::std::option::Option<
    unsafe extern "C" fn(
        readobj: *mut zval,
        retval: *mut zval,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_count_elements_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        count: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_closure_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut zval,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut _zend_function,
        zobj_ptr: *mut *mut zval,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_gc_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        table: *mut *mut *mut zval,
        n: *mut ::std::os::raw::c_int,
    ) -> *mut HashTable,
>;
pub type zend_object_do_operation_t = ::std::option::Option<
    unsafe extern "C" fn(
        opcode: zend_uchar,
        result: *mut zval,
        op1: *mut zval,
        op2: *mut zval,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_handlers {
    pub add_ref: zend_object_add_ref_t,
    pub del_ref: zend_object_del_ref_t,
    pub clone_obj: zend_object_clone_obj_t,
    pub read_property: zend_object_read_property_t,
    pub write_property: zend_object_write_property_t,
    pub read_dimension: zend_object_read_dimension_t,
    pub write_dimension: zend_object_write_dimension_t,
    pub get_property_ptr_ptr: zend_object_get_property_ptr_ptr_t,
    pub get: zend_object_get_t,
    pub set: zend_object_set_t,
    pub has_property: zend_object_has_property_t,
    pub unset_property: zend_object_unset_property_t,
    pub has_dimension: zend_object_has_dimension_t,
    pub unset_dimension: zend_object_unset_dimension_t,
    pub get_properties: zend_object_get_properties_t,
    pub get_method: zend_object_get_method_t,
    pub call_method: zend_object_call_method_t,
    pub get_constructor: zend_object_get_constructor_t,
    pub get_class_entry: zend_object_get_class_entry_t,
    pub get_class_name: zend_object_get_class_name_t,
    pub compare_objects: zend_object_compare_t,
    pub cast_object: zend_object_cast_t,
    pub count_elements: zend_object_count_elements_t,
    pub get_debug_info: zend_object_get_debug_info_t,
    pub get_closure: zend_object_get_closure_t,
    pub get_gc: zend_object_get_gc_t,
    pub do_operation: zend_object_do_operation_t,
    pub compare: zend_object_compare_zvals_t,
}
pub type zend_ast = _zend_ast;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast {
    pub kind: ::std::os::raw::c_ushort,
    pub children: ::std::os::raw::c_ushort,
    pub u: _zend_ast__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_ast__bindgen_ty_1 {
    pub val: *mut zval,
    pub child: *mut zend_ast,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zvalue_value {
    pub lval: ::std::os::raw::c_long,
    pub dval: f64,
    pub str: _zvalue_value__bindgen_ty_1,
    pub ht: *mut HashTable,
    pub obj: zend_object_value,
    pub ast: *mut zend_ast,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zvalue_value__bindgen_ty_1 {
    pub val: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
}
pub type zvalue_value = _zvalue_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct {
    pub value: zvalue_value,
    pub refcount__gc: zend_uint,
    pub type_: zend_uchar,
    pub is_ref__gc: zend_uchar,
}
pub type zend_object_iterator = _zend_object_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator_funcs {
    pub dtor: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub valid: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> ::std::os::raw::c_int,
    >,
    pub get_current_data: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, data: *mut *mut *mut zval),
    >,
    pub get_current_key: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, key: *mut zval),
    >,
    pub move_forward: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub rewind: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub invalidate_current:
        ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
}
pub type zend_object_iterator_funcs = _zend_object_iterator_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator {
    pub data: *mut ::std::os::raw::c_void,
    pub funcs: *mut zend_object_iterator_funcs,
    pub index: ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_iterator_funcs {
    pub funcs: *mut zend_object_iterator_funcs,
    pub zf_new_iterator: *mut _zend_function,
    pub zf_valid: *mut _zend_function,
    pub zf_current: *mut _zend_function,
    pub zf_key: *mut _zend_function,
    pub zf_next: *mut _zend_function,
    pub zf_rewind: *mut _zend_function,
}
pub type zend_class_iterator_funcs = _zend_class_iterator_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_serialize_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_unserialize_data {
    _unused: [u8; 0],
}
pub type zend_serialize_data = _zend_serialize_data;
pub type zend_unserialize_data = _zend_unserialize_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_method_reference {
    pub method_name: *const ::std::os::raw::c_char,
    pub mname_len: ::std::os::raw::c_uint,
    pub ce: *mut zend_class_entry,
    pub class_name: *const ::std::os::raw::c_char,
    pub cname_len: ::std::os::raw::c_uint,
}
pub type zend_trait_method_reference = _zend_trait_method_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_precedence {
    pub trait_method: *mut zend_trait_method_reference,
    pub exclude_from_classes: *mut *mut zend_class_entry,
}
pub type zend_trait_precedence = _zend_trait_precedence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_alias {
    pub trait_method: *mut zend_trait_method_reference,
    #[doc = " name for method to be added"]
    pub alias: *const ::std::os::raw::c_char,
    pub alias_len: ::std::os::raw::c_uint,
    #[doc = " modifiers to be set on trait method"]
    pub modifiers: zend_uint,
}
pub type zend_trait_alias = _zend_trait_alias;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_entry {
    pub type_: ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub name_length: zend_uint,
    pub parent: *mut _zend_class_entry,
    pub refcount: ::std::os::raw::c_int,
    pub ce_flags: zend_uint,
    pub function_table: HashTable,
    pub properties_info: HashTable,
    pub default_properties_table: *mut *mut zval,
    pub default_static_members_table: *mut *mut zval,
    pub static_members_table: *mut *mut zval,
    pub constants_table: HashTable,
    pub default_properties_count: ::std::os::raw::c_int,
    pub default_static_members_count: ::std::os::raw::c_int,
    pub constructor: *mut _zend_function,
    pub destructor: *mut _zend_function,
    pub clone: *mut _zend_function,
    pub __get: *mut _zend_function,
    pub __set: *mut _zend_function,
    pub __unset: *mut _zend_function,
    pub __isset: *mut _zend_function,
    pub __call: *mut _zend_function,
    pub __callstatic: *mut _zend_function,
    pub __tostring: *mut _zend_function,
    pub __debugInfo: *mut _zend_function,
    pub serialize_func: *mut _zend_function,
    pub unserialize_func: *mut _zend_function,
    pub iterator_funcs: zend_class_iterator_funcs,
    pub create_object: ::std::option::Option<
        unsafe extern "C" fn(class_type: *mut zend_class_entry) -> zend_object_value,
    >,
    pub get_iterator: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            object: *mut zval,
            by_ref: ::std::os::raw::c_int,
        ) -> *mut zend_object_iterator,
    >,
    pub interface_gets_implemented: ::std::option::Option<
        unsafe extern "C" fn(
            iface: *mut zend_class_entry,
            class_type: *mut zend_class_entry,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_static_method: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            method: *mut ::std::os::raw::c_char,
            method_len: ::std::os::raw::c_int,
        ) -> *mut _zend_function,
    >,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            buffer: *mut *mut ::std::os::raw::c_uchar,
            buf_len: *mut zend_uint,
            data: *mut zend_serialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub unserialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut *mut zval,
            ce: *mut zend_class_entry,
            buf: *const ::std::os::raw::c_uchar,
            buf_len: zend_uint,
            data: *mut zend_unserialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub interfaces: *mut *mut zend_class_entry,
    pub num_interfaces: zend_uint,
    pub traits: *mut *mut zend_class_entry,
    pub num_traits: zend_uint,
    pub trait_aliases: *mut *mut zend_trait_alias,
    pub trait_precedences: *mut *mut zend_trait_precedence,
    pub info: _zend_class_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_1 {
    pub user: _zend_class_entry__bindgen_ty_1__bindgen_ty_1,
    pub internal: _zend_class_entry__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_1 {
    pub filename: *const ::std::os::raw::c_char,
    pub line_start: zend_uint,
    pub line_end: zend_uint,
    pub doc_comment: *const ::std::os::raw::c_char,
    pub doc_comment_len: zend_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_2 {
    pub builtin_functions: *const _zend_function_entry,
    pub module: *mut _zend_module_entry,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _gc_root_buffer {
    pub prev: *mut _gc_root_buffer,
    pub next: *mut _gc_root_buffer,
    pub handle: zend_object_handle,
    pub u: _gc_root_buffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _gc_root_buffer__bindgen_ty_1 {
    pub pz: *mut zval,
    pub handlers: *const zend_object_handlers,
    _bindgen_union_align: u64,
}
pub type gc_root_buffer = _gc_root_buffer;
pub const zend_error_handling_t_EH_NORMAL: zend_error_handling_t = 0;
pub const zend_error_handling_t_EH_SUPPRESS: zend_error_handling_t = 1;
pub const zend_error_handling_t_EH_THROW: zend_error_handling_t = 2;
pub type zend_error_handling_t = u32;
pub type zend_op_array = _zend_op_array;
pub type zend_op = _zend_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_literal {
    pub constant: zval,
    pub hash_value: zend_ulong,
    pub cache_slot: zend_uint,
}
pub type zend_literal = _zend_literal;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode_op {
    pub constant: zend_uint,
    pub var: zend_uint,
    pub num: zend_uint,
    pub hash: zend_ulong,
    pub opline_num: zend_uint,
    pub jmp_addr: *mut zend_op,
    pub zv: *mut zval,
    pub literal: *mut zend_literal,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
pub type znode_op = _znode_op;
pub type zend_execute_data = _zend_execute_data;
pub type opcode_handler_t = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_op {
    pub handler: opcode_handler_t,
    pub op1: znode_op,
    pub op2: znode_op,
    pub result: znode_op,
    pub extended_value: ulong,
    pub lineno: uint,
    pub opcode: zend_uchar,
    pub op1_type: zend_uchar,
    pub op2_type: zend_uchar,
    pub result_type: zend_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_brk_cont_element {
    pub start: ::std::os::raw::c_int,
    pub cont: ::std::os::raw::c_int,
    pub brk: ::std::os::raw::c_int,
    pub parent: ::std::os::raw::c_int,
}
pub type zend_brk_cont_element = _zend_brk_cont_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_try_catch_element {
    pub try_op: zend_uint,
    pub catch_op: zend_uint,
    pub finally_op: zend_uint,
    pub finally_end: zend_uint,
}
pub type zend_try_catch_element = _zend_try_catch_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_property_info {
    pub flags: zend_uint,
    pub name: *const ::std::os::raw::c_char,
    pub name_length: ::std::os::raw::c_int,
    pub h: ulong,
    pub offset: ::std::os::raw::c_int,
    pub doc_comment: *const ::std::os::raw::c_char,
    pub doc_comment_len: ::std::os::raw::c_int,
    pub ce: *mut zend_class_entry,
}
pub type zend_property_info = _zend_property_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arg_info {
    pub name: *const ::std::os::raw::c_char,
    pub name_len: zend_uint,
    pub class_name: *const ::std::os::raw::c_char,
    pub class_name_len: zend_uint,
    pub type_hint: zend_uchar,
    pub pass_by_reference: zend_uchar,
    pub allow_null: zend_bool,
    pub is_variadic: zend_bool,
}
pub type zend_arg_info = _zend_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_compiled_variable {
    pub name: *const ::std::os::raw::c_char,
    pub name_len: ::std::os::raw::c_int,
    pub hash_value: ulong,
}
pub type zend_compiled_variable = _zend_compiled_variable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_op_array {
    pub type_: zend_uchar,
    pub function_name: *const ::std::os::raw::c_char,
    pub scope: *mut zend_class_entry,
    pub fn_flags: zend_uint,
    pub prototype: *mut _zend_function,
    pub num_args: zend_uint,
    pub required_num_args: zend_uint,
    pub arg_info: *mut zend_arg_info,
    pub refcount: *mut zend_uint,
    pub opcodes: *mut zend_op,
    pub last: zend_uint,
    pub vars: *mut zend_compiled_variable,
    pub last_var: ::std::os::raw::c_int,
    pub T: zend_uint,
    pub nested_calls: zend_uint,
    pub used_stack: zend_uint,
    pub brk_cont_array: *mut zend_brk_cont_element,
    pub last_brk_cont: ::std::os::raw::c_int,
    pub try_catch_array: *mut zend_try_catch_element,
    pub last_try_catch: ::std::os::raw::c_int,
    pub has_finally_block: zend_bool,
    pub static_variables: *mut HashTable,
    pub this_var: zend_uint,
    pub filename: *const ::std::os::raw::c_char,
    pub line_start: zend_uint,
    pub line_end: zend_uint,
    pub doc_comment: *const ::std::os::raw::c_char,
    pub doc_comment_len: zend_uint,
    pub early_binding: zend_uint,
    pub literals: *mut zend_literal,
    pub last_literal: ::std::os::raw::c_int,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub last_cache_slot: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function {
    pub type_: zend_uchar,
    pub function_name: *const ::std::os::raw::c_char,
    pub scope: *mut zend_class_entry,
    pub fn_flags: zend_uint,
    pub prototype: *mut _zend_function,
    pub num_args: zend_uint,
    pub required_num_args: zend_uint,
    pub arg_info: *mut zend_arg_info,
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            ht: ::std::os::raw::c_int,
            return_value: *mut zval,
            return_value_ptr: *mut *mut zval,
            this_ptr: *mut zval,
            return_value_used: ::std::os::raw::c_int,
        ),
    >,
    pub module: *mut _zend_module_entry,
}
pub type zend_internal_function = _zend_internal_function;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_function {
    pub type_: zend_uchar,
    pub common: _zend_function__bindgen_ty_1,
    pub op_array: zend_op_array,
    pub internal_function: zend_internal_function,
    _bindgen_union_align: [u64; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub function_name: *const ::std::os::raw::c_char,
    pub scope: *mut zend_class_entry,
    pub fn_flags: zend_uint,
    pub prototype: *mut _zend_function,
    pub num_args: zend_uint,
    pub required_num_args: zend_uint,
    pub arg_info: *mut zend_arg_info,
}
pub type zend_function = _zend_function;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_state {
    pub function: *mut zend_function,
    pub arguments: *mut *mut ::std::os::raw::c_void,
}
pub type zend_function_state = _zend_function_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _call_slot {
    pub fbc: *mut zend_function,
    pub object: *mut zval,
    pub called_scope: *mut zend_class_entry,
    pub num_additional_args: zend_uint,
    pub is_ctor_call: zend_bool,
    pub is_ctor_result_used: zend_bool,
}
pub type call_slot = _call_slot;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_execute_data {
    pub opline: *mut _zend_op,
    pub function_state: zend_function_state,
    pub op_array: *mut zend_op_array,
    pub object: *mut zval,
    pub symbol_table: *mut HashTable,
    pub prev_execute_data: *mut _zend_execute_data,
    pub old_error_reporting: *mut zval,
    pub nested: zend_bool,
    pub original_return_value: *mut *mut zval,
    pub current_scope: *mut zend_class_entry,
    pub current_called_scope: *mut zend_class_entry,
    pub current_this: *mut zval,
    pub fast_ret: *mut _zend_op,
    pub delayed_exception: *mut zval,
    pub call_slots: *mut call_slot,
    pub call: *mut call_slot,
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type zend_executor_globals = _zend_executor_globals;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stack {
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut *mut ::std::os::raw::c_void,
}
pub type zend_stack = _zend_stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ptr_stack {
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut *mut ::std::os::raw::c_void,
    pub top_element: *mut *mut ::std::os::raw::c_void,
    pub persistent: zend_bool,
}
pub type zend_ptr_stack = _zend_ptr_stack;
pub type zend_objects_store_dtor_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut ::std::os::raw::c_void, handle: zend_object_handle),
>;
pub type zend_objects_free_object_storage_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut ::std::os::raw::c_void)>;
pub type zend_objects_store_clone_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut ::std::os::raw::c_void,
        object_clone: *mut *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object_store_bucket {
    pub destructor_called: zend_bool,
    pub valid: zend_bool,
    pub apply_count: zend_uchar,
    pub bucket: _zend_object_store_bucket__store_bucket,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_object_store_bucket__store_bucket {
    pub obj: _zend_object_store_bucket__store_bucket__store_object,
    pub free_list: _zend_object_store_bucket__store_bucket__bindgen_ty_1,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_store_bucket__store_bucket__store_object {
    pub object: *mut ::std::os::raw::c_void,
    pub dtor: zend_objects_store_dtor_t,
    pub free_storage: zend_objects_free_object_storage_t,
    pub clone: zend_objects_store_clone_t,
    pub handlers: *const zend_object_handlers,
    pub refcount: zend_uint,
    pub buffered: *mut gc_root_buffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_store_bucket__store_bucket__bindgen_ty_1 {
    pub next: ::std::os::raw::c_int,
}
pub type zend_object_store_bucket = _zend_object_store_bucket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_objects_store {
    pub object_buckets: *mut zend_object_store_bucket,
    pub top: zend_uint,
    pub size: zend_uint,
    pub free_list_head: ::std::os::raw::c_int,
}
pub type zend_objects_store = _zend_objects_store;
pub type fpu_control_t = ::std::os::raw::c_ushort;
pub type zend_vm_stack = *mut _zend_vm_stack;
pub type zend_ini_entry = _zend_ini_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_executor_globals {
    pub return_value_ptr_ptr: *mut *mut zval,
    pub uninitialized_zval: zval,
    pub uninitialized_zval_ptr: *mut zval,
    pub error_zval: zval,
    pub error_zval_ptr: *mut zval,
    pub symtable_cache: [*mut HashTable; 32usize],
    pub symtable_cache_limit: *mut *mut HashTable,
    pub symtable_cache_ptr: *mut *mut HashTable,
    pub opline_ptr: *mut *mut zend_op,
    pub active_symbol_table: *mut HashTable,
    pub symbol_table: HashTable,
    pub included_files: HashTable,
    pub bailout: *mut jmp_buf,
    pub error_reporting: ::std::os::raw::c_int,
    pub orig_error_reporting: ::std::os::raw::c_int,
    pub exit_status: ::std::os::raw::c_int,
    pub active_op_array: *mut zend_op_array,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub zend_constants: *mut HashTable,
    pub scope: *mut zend_class_entry,
    pub called_scope: *mut zend_class_entry,
    pub This: *mut zval,
    pub precision: ::std::os::raw::c_long,
    pub ticks_count: ::std::os::raw::c_int,
    pub in_execution: zend_bool,
    pub in_autoload: *mut HashTable,
    pub autoload_func: *mut zend_function,
    pub full_tables_cleanup: zend_bool,
    pub no_extensions: zend_bool,
    pub regular_list: HashTable,
    pub persistent_list: HashTable,
    pub argument_stack: zend_vm_stack,
    pub user_error_handler_error_reporting: ::std::os::raw::c_int,
    pub user_error_handler: *mut zval,
    pub user_exception_handler: *mut zval,
    pub user_error_handlers_error_reporting: zend_stack,
    pub user_error_handlers: zend_ptr_stack,
    pub user_exception_handlers: zend_ptr_stack,
    pub error_handling: zend_error_handling_t,
    pub exception_class: *mut zend_class_entry,
    pub timeout_seconds: ::std::os::raw::c_int,
    pub lambda_count: ::std::os::raw::c_int,
    pub ini_directives: *mut HashTable,
    pub modified_ini_directives: *mut HashTable,
    pub error_reporting_ini_entry: *mut zend_ini_entry,
    pub objects_store: zend_objects_store,
    pub exception: *mut zval,
    pub prev_exception: *mut zval,
    pub opline_before_exception: *mut zend_op,
    pub exception_op: [zend_op; 3usize],
    pub current_execute_data: *mut _zend_execute_data,
    pub current_module: *mut _zend_module_entry,
    pub std_property_info: zend_property_info,
    pub active: zend_bool,
    pub start_op: *mut zend_op,
    pub saved_fpu_cw_ptr: *mut ::std::os::raw::c_void,
    pub saved_fpu_cw: fpu_control_t,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
pub type zend_module_entry = _zend_module_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_entry {
    pub size: ::std::os::raw::c_ushort,
    pub zend_api: ::std::os::raw::c_uint,
    pub zend_debug: ::std::os::raw::c_uchar,
    pub zts: ::std::os::raw::c_uchar,
    pub ini_entry: *const _zend_ini_entry,
    pub deps: *const _zend_module_dep,
    pub name: *const ::std::os::raw::c_char,
    pub functions: *const _zend_function_entry,
    pub module_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub module_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub request_startup_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub request_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_int,
            module_number: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub info_func: ::std::option::Option<unsafe extern "C" fn(zend_module: *mut zend_module_entry)>,
    pub version: *const ::std::os::raw::c_char,
    pub globals_size: usize,
    pub globals_ptr: *mut ::std::os::raw::c_void,
    pub globals_ctor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub globals_dtor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub post_deactivate_func:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub module_started: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_uchar,
    pub handle: *mut ::std::os::raw::c_void,
    pub module_number: ::std::os::raw::c_int,
    pub build_id: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_dep {
    pub name: *const ::std::os::raw::c_char,
    pub rel: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_vm_stack {
    pub top: *mut *mut ::std::os::raw::c_void,
    pub end: *mut *mut ::std::os::raw::c_void,
    pub prev: zend_vm_stack,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_entry {
    pub fname: *const ::std::os::raw::c_char,
    pub handler: ::std::option::Option<
        unsafe extern "C" fn(
            ht: ::std::os::raw::c_int,
            return_value: *mut zval,
            return_value_ptr: *mut *mut zval,
            this_ptr: *mut zval,
            return_value_used: ::std::os::raw::c_int,
        ),
    >,
    pub arg_info: *const _zend_arg_info,
    pub num_args: zend_uint,
    pub flags: zend_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry {
    pub module_number: ::std::os::raw::c_int,
    pub modifiable: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub name_length: uint,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut ::std::os::raw::c_char,
            new_value_length: uint,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *mut ::std::os::raw::c_char,
    pub value_length: uint,
    pub orig_value: *mut ::std::os::raw::c_char,
    pub orig_value_length: uint,
    pub orig_modifiable: ::std::os::raw::c_int,
    pub modified: ::std::os::raw::c_int,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int),
    >,
}
