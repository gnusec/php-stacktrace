/* automatically generated by rust-bindgen */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type zend_long = i64;
pub type zend_ulong = u64;
pub type zend_bool = ::std::os::raw::c_uchar;
pub type zend_uchar = ::std::os::raw::c_uchar;
pub type zend_object_handlers = _zend_object_handlers;
pub type zend_class_entry = _zend_class_entry;
pub type zend_function = _zend_function;
pub type zend_execute_data = _zend_execute_data;
pub type zval = _zval_struct;
pub type zend_refcounted = _zend_refcounted;
pub type zend_string = _zend_string;
pub type zend_array = _zend_array;
pub type zend_object = _zend_object;
pub type zend_resource = _zend_resource;
pub type zend_reference = _zend_reference;
pub type zend_ast_ref = _zend_ast_ref;
pub type zend_ast = _zend_ast;
pub type dtor_func_t = ::std::option::Option<unsafe extern "C" fn(pDest: *mut zval)>;
pub type zend_type = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_value {
    pub lval: zend_long,
    pub dval: f64,
    pub counted: *mut zend_refcounted,
    pub str: *mut zend_string,
    pub arr: *mut zend_array,
    pub obj: *mut zend_object,
    pub res: *mut zend_resource,
    pub ref_: *mut zend_reference,
    pub ast: *mut zend_ast_ref,
    pub zv: *mut zval,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ce: *mut zend_class_entry,
    pub func: *mut zend_function,
    pub ww: _zend_value__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_value__bindgen_ty_1 {
    pub w1: u32,
    pub w2: u32,
}
#[test]
fn bindgen_test_layout__zend_value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value__bindgen_ty_1>())).w1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value__bindgen_ty_1>())).w2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value__bindgen_ty_1),
            "::",
            stringify!(w2)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_value() {
    assert_eq!(
        ::std::mem::size_of::<_zend_value>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_value))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_value>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).lval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(lval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).dval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(dval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).counted as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(counted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).arr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).res as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).zv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(zv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ce as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).func as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_value>())).ww as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_value),
            "::",
            stringify!(ww)
        )
    );
}
pub type zend_value = _zend_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zval_struct {
    pub value: zend_value,
    pub u1: _zval_struct__bindgen_ty_1,
    pub u2: _zval_struct__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_1 {
    pub v: _zval_struct__bindgen_ty_1__bindgen_ty_1,
    pub type_info: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zval_struct__bindgen_ty_1__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub type_flags: zend_uchar,
    pub const_flags: zend_uchar,
    pub reserved: zend_uchar,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).type_flags
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).const_flags
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(const_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_1>())).type_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_1),
            "::",
            stringify!(type_info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zval_struct__bindgen_ty_2 {
    pub next: u32,
    pub cache_slot: u32,
    pub lineno: u32,
    pub num_args: u32,
    pub fe_pos: u32,
    pub fe_iter_idx: u32,
    pub access_flags: u32,
    pub property_guard: u32,
    pub extra: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__zval_struct__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(_zval_struct__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_zval_struct__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).cache_slot as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(cache_slot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).lineno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).num_args as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).fe_pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).fe_iter_idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(fe_iter_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).access_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).property_guard as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(property_guard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zval_struct__bindgen_ty_2>())).extra as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct__bindgen_ty_2),
            "::",
            stringify!(extra)
        )
    );
}
#[test]
fn bindgen_test_layout__zval_struct() {
    assert_eq!(
        ::std::mem::size_of::<_zval_struct>(),
        16usize,
        concat!("Size of: ", stringify!(_zval_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<_zval_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(_zval_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).u1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(u1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zval_struct>())).u2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zval_struct),
            "::",
            stringify!(u2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted_h {
    pub refcount: u32,
    pub u: _zend_refcounted_h__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_refcounted_h__bindgen_ty_1 {
    pub v: _zend_refcounted_h__bindgen_ty_1__bindgen_ty_1,
    pub type_info: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_refcounted_h__bindgen_ty_1__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub flags: zend_uchar,
    pub gc_info: u16,
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).type_
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).flags
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1>())).gc_info
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gc_info)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_refcounted_h__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_refcounted_h__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1>())).v as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_refcounted_h__bindgen_ty_1>())).type_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h__bindgen_ty_1),
            "::",
            stringify!(type_info)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_refcounted_h() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted_h>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted_h))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted_h>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted_h))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted_h>())).refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted_h>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted_h),
            "::",
            stringify!(u)
        )
    );
}
pub type zend_refcounted_h = _zend_refcounted_h;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_refcounted {
    pub gc: zend_refcounted_h,
}
#[test]
fn bindgen_test_layout__zend_refcounted() {
    assert_eq!(
        ::std::mem::size_of::<_zend_refcounted>(),
        8usize,
        concat!("Size of: ", stringify!(_zend_refcounted))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_refcounted>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_refcounted))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_refcounted>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_refcounted),
            "::",
            stringify!(gc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_string {
    pub gc: zend_refcounted_h,
    pub h: zend_ulong,
    pub len: usize,
    pub val: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__zend_string() {
    assert_eq!(
        ::std::mem::size_of::<_zend_string>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_string))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_string>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_string))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).h as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_string>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_string),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _Bucket {
    pub val: zval,
    pub h: zend_ulong,
    pub key: *mut zend_string,
}
#[test]
fn bindgen_test_layout__Bucket() {
    assert_eq!(
        ::std::mem::size_of::<_Bucket>(),
        32usize,
        concat!("Size of: ", stringify!(_Bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<_Bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(_Bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).h as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Bucket>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_Bucket),
            "::",
            stringify!(key)
        )
    );
}
pub type Bucket = _Bucket;
pub type HashTable = _zend_array;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_array {
    pub gc: zend_refcounted_h,
    pub u: _zend_array__bindgen_ty_1,
    pub nTableMask: u32,
    pub arData: *mut Bucket,
    pub nNumUsed: u32,
    pub nNumOfElements: u32,
    pub nTableSize: u32,
    pub nInternalPointer: u32,
    pub nNextFreeElement: zend_long,
    pub pDestructor: dtor_func_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_array__bindgen_ty_1 {
    pub v: _zend_array__bindgen_ty_1__bindgen_ty_1,
    pub flags: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_array__bindgen_ty_1__bindgen_ty_1 {
    pub flags: zend_uchar,
    pub nApplyCount: zend_uchar,
    pub nIteratorsCount: zend_uchar,
    pub consistency: zend_uchar,
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).flags as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).nApplyCount
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nApplyCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).nIteratorsCount
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nIteratorsCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_array__bindgen_ty_1__bindgen_ty_1>())).consistency
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(consistency)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_array__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_zend_array__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_array__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array__bindgen_ty_1>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array__bindgen_ty_1>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_array() {
    assert_eq!(
        ::std::mem::size_of::<_zend_array>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_array))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nTableMask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).arData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(arData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNumUsed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNumOfElements as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNumOfElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nTableSize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nInternalPointer as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nInternalPointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).nNextFreeElement as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(nNextFreeElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_array>())).pDestructor as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_array),
            "::",
            stringify!(pDestructor)
        )
    );
}
pub type HashPosition = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HashTableIterator {
    pub ht: *mut HashTable,
    pub pos: HashPosition,
}
#[test]
fn bindgen_test_layout__HashTableIterator() {
    assert_eq!(
        ::std::mem::size_of::<_HashTableIterator>(),
        16usize,
        concat!("Size of: ", stringify!(_HashTableIterator))
    );
    assert_eq!(
        ::std::mem::align_of::<_HashTableIterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_HashTableIterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HashTableIterator>())).ht as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_HashTableIterator>())).pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HashTableIterator),
            "::",
            stringify!(pos)
        )
    );
}
pub type HashTableIterator = _HashTableIterator;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object {
    pub gc: zend_refcounted_h,
    pub handle: u32,
    pub ce: *mut zend_class_entry,
    pub handlers: *const zend_object_handlers,
    pub properties: *mut HashTable,
    pub properties_table: [zval; 1usize],
}
#[test]
fn bindgen_test_layout__zend_object() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).ce as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).handlers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(handlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).properties as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object>())).properties_table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object),
            "::",
            stringify!(properties_table)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_resource {
    pub gc: zend_refcounted_h,
    pub handle: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_resource() {
    assert_eq!(
        ::std::mem::size_of::<_zend_resource>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_resource))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_resource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_resource>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_resource),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_reference {
    pub gc: zend_refcounted_h,
    pub val: zval,
}
#[test]
fn bindgen_test_layout__zend_reference() {
    assert_eq!(
        ::std::mem::size_of::<_zend_reference>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_reference))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_reference>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_reference>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_reference),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_ast_ref {
    pub gc: zend_refcounted_h,
    pub ast: *mut zend_ast,
}
#[test]
fn bindgen_test_layout__zend_ast_ref() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast_ref>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ast_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_ref>())).gc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_ref),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast_ref>())).ast as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast_ref),
            "::",
            stringify!(ast)
        )
    );
}
pub type zend_ast_kind = u16;
pub type zend_ast_attr = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ast {
    pub kind: zend_ast_kind,
    pub attr: zend_ast_attr,
    pub lineno: u32,
    pub child: [*mut zend_ast; 1usize],
}
#[test]
fn bindgen_test_layout__zend_ast() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ast>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_ast))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ast>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).lineno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ast>())).child as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ast),
            "::",
            stringify!(child)
        )
    );
}
pub type zend_object_iterator = _zend_object_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_iterator_funcs {
    pub dtor: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub valid: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator) -> ::std::os::raw::c_int,
    >,
    pub get_current_data:
        ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator) -> *mut zval>,
    pub get_current_key: ::std::option::Option<
        unsafe extern "C" fn(iter: *mut zend_object_iterator, key: *mut zval),
    >,
    pub move_forward: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub rewind: ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
    pub invalidate_current:
        ::std::option::Option<unsafe extern "C" fn(iter: *mut zend_object_iterator)>,
}
#[test]
fn bindgen_test_layout__zend_object_iterator_funcs() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator_funcs>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_object_iterator_funcs))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator_funcs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).dtor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).valid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).get_current_data as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).get_current_key as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(get_current_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).move_forward as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(move_forward)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).rewind as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(rewind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_iterator_funcs>())).invalidate_current as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator_funcs),
            "::",
            stringify!(invalidate_current)
        )
    );
}
pub type zend_object_iterator_funcs = _zend_object_iterator_funcs;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_object_iterator {
    pub std: zend_object,
    pub data: zval,
    pub funcs: *mut zend_object_iterator_funcs,
    pub index: zend_ulong,
}
#[test]
fn bindgen_test_layout__zend_object_iterator() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_iterator>(),
        88usize,
        concat!("Size of: ", stringify!(_zend_object_iterator))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_iterator>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_iterator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).std as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).funcs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_iterator>())).index as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_iterator),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_iterator_funcs {
    pub funcs: *mut zend_object_iterator_funcs,
    pub zf_new_iterator: *mut _zend_function,
    pub zf_valid: *mut _zend_function,
    pub zf_current: *mut _zend_function,
    pub zf_key: *mut _zend_function,
    pub zf_next: *mut _zend_function,
    pub zf_rewind: *mut _zend_function,
}
#[test]
fn bindgen_test_layout__zend_class_iterator_funcs() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_iterator_funcs>(),
        56usize,
        concat!("Size of: ", stringify!(_zend_class_iterator_funcs))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_iterator_funcs>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_iterator_funcs))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).funcs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(funcs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_new_iterator as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_new_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_valid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_current as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_key as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_next as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_iterator_funcs>())).zf_rewind as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_iterator_funcs),
            "::",
            stringify!(zf_rewind)
        )
    );
}
pub type zend_class_iterator_funcs = _zend_class_iterator_funcs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_serialize_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_unserialize_data {
    _unused: [u8; 0],
}
pub type zend_serialize_data = _zend_serialize_data;
pub type zend_unserialize_data = _zend_unserialize_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_method_reference {
    pub method_name: *mut zend_string,
    pub ce: *mut zend_class_entry,
    pub class_name: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_trait_method_reference() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_method_reference>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_trait_method_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_method_reference>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_method_reference))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_method_reference>())).method_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(method_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_method_reference>())).ce as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_method_reference>())).class_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_method_reference),
            "::",
            stringify!(class_name)
        )
    );
}
pub type zend_trait_method_reference = _zend_trait_method_reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_precedence {
    pub trait_method: *mut zend_trait_method_reference,
    pub exclude_from_classes: *mut _zend_trait_precedence__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_trait_precedence__bindgen_ty_1 {
    pub ce: *mut zend_class_entry,
    pub class_name: *mut zend_string,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__zend_trait_precedence__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_trait_precedence__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence__bindgen_ty_1>())).ce as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1),
            "::",
            stringify!(ce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence__bindgen_ty_1>())).class_name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence__bindgen_ty_1),
            "::",
            stringify!(class_name)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_trait_precedence() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_precedence>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_trait_precedence))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_precedence>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_precedence))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence>())).trait_method as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(trait_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_trait_precedence>())).exclude_from_classes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_precedence),
            "::",
            stringify!(exclude_from_classes)
        )
    );
}
pub type zend_trait_precedence = _zend_trait_precedence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_trait_alias {
    pub trait_method: *mut zend_trait_method_reference,
    pub alias: *mut zend_string,
    pub modifiers: u32,
}
#[test]
fn bindgen_test_layout__zend_trait_alias() {
    assert_eq!(
        ::std::mem::size_of::<_zend_trait_alias>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_trait_alias))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_trait_alias>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_trait_alias))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).trait_method as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(trait_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).alias as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_trait_alias>())).modifiers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_trait_alias),
            "::",
            stringify!(modifiers)
        )
    );
}
pub type zend_trait_alias = _zend_trait_alias;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_class_entry {
    pub type_: ::std::os::raw::c_char,
    pub name: *mut zend_string,
    pub parent: *mut _zend_class_entry,
    pub refcount: ::std::os::raw::c_int,
    pub ce_flags: u32,
    pub default_properties_count: ::std::os::raw::c_int,
    pub default_static_members_count: ::std::os::raw::c_int,
    pub default_properties_table: *mut zval,
    pub default_static_members_table: *mut zval,
    pub static_members_table: *mut zval,
    pub function_table: HashTable,
    pub properties_info: HashTable,
    pub constants_table: HashTable,
    pub constructor: *mut _zend_function,
    pub destructor: *mut _zend_function,
    pub clone: *mut _zend_function,
    pub __get: *mut _zend_function,
    pub __set: *mut _zend_function,
    pub __unset: *mut _zend_function,
    pub __isset: *mut _zend_function,
    pub __call: *mut _zend_function,
    pub __callstatic: *mut _zend_function,
    pub __tostring: *mut _zend_function,
    pub __debugInfo: *mut _zend_function,
    pub serialize_func: *mut _zend_function,
    pub unserialize_func: *mut _zend_function,
    pub iterator_funcs: zend_class_iterator_funcs,
    pub create_object: ::std::option::Option<
        unsafe extern "C" fn(class_type: *mut zend_class_entry) -> *mut zend_object,
    >,
    pub get_iterator: ::std::option::Option<
        unsafe extern "C" fn(
            ce: *mut zend_class_entry,
            object: *mut zval,
            by_ref: ::std::os::raw::c_int,
        ) -> *mut zend_object_iterator,
    >,
    pub interface_gets_implemented: ::std::option::Option<
        unsafe extern "C" fn(iface: *mut zend_class_entry, class_type: *mut zend_class_entry)
            -> ::std::os::raw::c_int,
    >,
    pub get_static_method: ::std::option::Option<
        unsafe extern "C" fn(ce: *mut zend_class_entry, method: *mut zend_string)
            -> *mut _zend_function,
    >,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            buffer: *mut *mut ::std::os::raw::c_uchar,
            buf_len: *mut usize,
            data: *mut zend_serialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub unserialize: ::std::option::Option<
        unsafe extern "C" fn(
            object: *mut zval,
            ce: *mut zend_class_entry,
            buf: *const ::std::os::raw::c_uchar,
            buf_len: usize,
            data: *mut zend_unserialize_data,
        ) -> ::std::os::raw::c_int,
    >,
    pub num_interfaces: u32,
    pub num_traits: u32,
    pub interfaces: *mut *mut zend_class_entry,
    pub traits: *mut *mut zend_class_entry,
    pub trait_aliases: *mut *mut zend_trait_alias,
    pub trait_precedences: *mut *mut zend_trait_precedence,
    pub info: _zend_class_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_class_entry__bindgen_ty_1 {
    pub user: _zend_class_entry__bindgen_ty_1__bindgen_ty_1,
    pub internal: _zend_class_entry__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_1 {
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).filename
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).line_start
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(line_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).line_end
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(line_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_1>())).doc_comment
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(doc_comment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_class_entry__bindgen_ty_1__bindgen_ty_2 {
    pub builtin_functions: *const _zend_function_entry,
    pub module: *mut _zend_module_entry,
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>()))
                .builtin_functions as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(builtin_functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1__bindgen_ty_2>())).module
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(module)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_class_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1>())).user as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry__bindgen_ty_1>())).internal as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry__bindgen_ty_1),
            "::",
            stringify!(internal)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_class_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_class_entry>(),
        504usize,
        concat!("Size of: ", stringify!(_zend_class_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_class_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_class_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).refcount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).ce_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(ce_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_properties_count as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_static_members_count as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_properties_table as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_properties_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).default_static_members_table as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(default_static_members_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).static_members_table as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(static_members_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).function_table as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(function_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).properties_info as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(properties_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).constants_table as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constants_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).constructor as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(constructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).destructor as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(destructor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).clone as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__get as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__set as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__unset as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__unset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__isset as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__isset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__call as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__callstatic as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__callstatic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__tostring as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__tostring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).__debugInfo as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(__debugInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).serialize_func as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).unserialize_func as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).iterator_funcs as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(iterator_funcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).create_object as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(create_object)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).get_iterator as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_iterator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).interface_gets_implemented as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(interface_gets_implemented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).get_static_method as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(get_static_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).serialize as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(serialize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).unserialize as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(unserialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).num_interfaces as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_interfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).num_traits as *const _ as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(num_traits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).interfaces as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(interfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).traits as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(traits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).trait_aliases as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_aliases)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_class_entry>())).trait_precedences as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(trait_precedences)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_class_entry>())).info as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_class_entry),
            "::",
            stringify!(info)
        )
    );
}
pub const zend_error_handling_t_EH_NORMAL: zend_error_handling_t = 0;
pub const zend_error_handling_t_EH_SUPPRESS: zend_error_handling_t = 1;
pub const zend_error_handling_t_EH_THROW: zend_error_handling_t = 2;
pub type zend_error_handling_t = u32;
pub type zend_object_read_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_read_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        offset: *mut zval,
        type_: ::std::os::raw::c_int,
        rv: *mut zval,
    ) -> *mut zval,
>;
pub type zend_object_write_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        value: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_write_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, offset: *mut zval, value: *mut zval),
>;
pub type zend_object_get_property_ptr_ptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        type_: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> *mut zval,
>;
pub type zend_object_set_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, value: *mut zval)>;
pub type zend_object_get_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, rv: *mut zval) -> *mut zval>;
pub type zend_object_has_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        has_set_exists: ::std::os::raw::c_int,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_has_dimension_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, member: *mut zval, check_empty: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type zend_object_unset_property_t = ::std::option::Option<
    unsafe extern "C" fn(
        object: *mut zval,
        member: *mut zval,
        cache_slot: *mut *mut ::std::os::raw::c_void,
    ),
>;
pub type zend_object_unset_dimension_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval, offset: *mut zval)>;
pub type zend_object_get_properties_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut HashTable>;
pub type zend_object_get_debug_info_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, is_temp: *mut ::std::os::raw::c_int) -> *mut HashTable,
>;
pub type zend_object_call_method_t = ::std::option::Option<
    unsafe extern "C" fn(
        method: *mut zend_string,
        object: *mut zend_object,
        execute_data: *mut zend_execute_data,
        return_value: *mut zval,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_method_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut *mut zend_object, method: *mut zend_string, key: *const zval)
        -> *mut _zend_function,
>;
pub type zend_object_get_constructor_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object) -> *mut _zend_function>;
pub type zend_object_dtor_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object)>;
pub type zend_object_free_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zend_object)>;
pub type zend_object_clone_obj_t =
    ::std::option::Option<unsafe extern "C" fn(object: *mut zval) -> *mut zend_object>;
pub type zend_object_get_class_name_t =
    ::std::option::Option<unsafe extern "C" fn(object: *const zend_object) -> *mut zend_string>;
pub type zend_object_compare_t = ::std::option::Option<
    unsafe extern "C" fn(object1: *mut zval, object2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_compare_zvals_t = ::std::option::Option<
    unsafe extern "C" fn(resul: *mut zval, op1: *mut zval, op2: *mut zval) -> ::std::os::raw::c_int,
>;
pub type zend_object_cast_t = ::std::option::Option<
    unsafe extern "C" fn(readobj: *mut zval, retval: *mut zval, type_: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type zend_object_count_elements_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, count: *mut zend_long) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_closure_t = ::std::option::Option<
    unsafe extern "C" fn(
        obj: *mut zval,
        ce_ptr: *mut *mut zend_class_entry,
        fptr_ptr: *mut *mut _zend_function,
        obj_ptr: *mut *mut zend_object,
    ) -> ::std::os::raw::c_int,
>;
pub type zend_object_get_gc_t = ::std::option::Option<
    unsafe extern "C" fn(object: *mut zval, table: *mut *mut zval, n: *mut ::std::os::raw::c_int)
        -> *mut HashTable,
>;
pub type zend_object_do_operation_t = ::std::option::Option<
    unsafe extern "C" fn(opcode: zend_uchar, result: *mut zval, op1: *mut zval, op2: *mut zval)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_object_handlers {
    pub offset: ::std::os::raw::c_int,
    pub free_obj: zend_object_free_obj_t,
    pub dtor_obj: zend_object_dtor_obj_t,
    pub clone_obj: zend_object_clone_obj_t,
    pub read_property: zend_object_read_property_t,
    pub write_property: zend_object_write_property_t,
    pub read_dimension: zend_object_read_dimension_t,
    pub write_dimension: zend_object_write_dimension_t,
    pub get_property_ptr_ptr: zend_object_get_property_ptr_ptr_t,
    pub get: zend_object_get_t,
    pub set: zend_object_set_t,
    pub has_property: zend_object_has_property_t,
    pub unset_property: zend_object_unset_property_t,
    pub has_dimension: zend_object_has_dimension_t,
    pub unset_dimension: zend_object_unset_dimension_t,
    pub get_properties: zend_object_get_properties_t,
    pub get_method: zend_object_get_method_t,
    pub call_method: zend_object_call_method_t,
    pub get_constructor: zend_object_get_constructor_t,
    pub get_class_name: zend_object_get_class_name_t,
    pub compare_objects: zend_object_compare_t,
    pub cast_object: zend_object_cast_t,
    pub count_elements: zend_object_count_elements_t,
    pub get_debug_info: zend_object_get_debug_info_t,
    pub get_closure: zend_object_get_closure_t,
    pub get_gc: zend_object_get_gc_t,
    pub do_operation: zend_object_do_operation_t,
    pub compare: zend_object_compare_zvals_t,
}
#[test]
fn bindgen_test_layout__zend_object_handlers() {
    assert_eq!(
        ::std::mem::size_of::<_zend_object_handlers>(),
        224usize,
        concat!("Size of: ", stringify!(_zend_object_handlers))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_object_handlers>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_object_handlers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).free_obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(free_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).dtor_obj as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(dtor_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).clone_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(clone_obj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).read_property as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).write_property as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).read_dimension as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(read_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).write_dimension as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(write_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_property_ptr_ptr as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_property_ptr_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).get as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).set as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).has_property as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).unset_property as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_property)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).has_dimension as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(has_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).unset_dimension as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(unset_dimension)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_properties as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_properties)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_method as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).call_method as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(call_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_constructor as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_constructor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_class_name as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_class_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).compare_objects as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare_objects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).cast_object as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(cast_object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).count_elements as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(count_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_debug_info as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_debug_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).get_closure as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).get_gc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(get_gc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_object_handlers>())).do_operation as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(do_operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_object_handlers>())).compare as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_object_handlers),
            "::",
            stringify!(compare)
        )
    );
}
pub type zend_op_array = _zend_op_array;
pub type zend_op = _zend_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _znode_op {
    pub constant: u32,
    pub var: u32,
    pub num: u32,
    pub opline_num: u32,
    pub jmp_offset: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout__znode_op() {
    assert_eq!(
        ::std::mem::size_of::<_znode_op>(),
        4usize,
        concat!("Size of: ", stringify!(_znode_op))
    );
    assert_eq!(
        ::std::mem::align_of::<_znode_op>(),
        4usize,
        concat!("Alignment of ", stringify!(_znode_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).constant as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).opline_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(opline_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_znode_op>())).jmp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_znode_op),
            "::",
            stringify!(jmp_offset)
        )
    );
}
pub type znode_op = _znode_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_op {
    pub handler: *const ::std::os::raw::c_void,
    pub op1: znode_op,
    pub op2: znode_op,
    pub result: znode_op,
    pub extended_value: u32,
    pub lineno: u32,
    pub opcode: zend_uchar,
    pub op1_type: zend_uchar,
    pub op2_type: zend_uchar,
    pub result_type: zend_uchar,
}
#[test]
fn bindgen_test_layout__zend_op() {
    assert_eq!(
        ::std::mem::size_of::<_zend_op>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_op))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).result as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).extended_value as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(extended_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).lineno as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(lineno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).opcode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op1_type as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op1_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).op2_type as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(op2_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op>())).result_type as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op),
            "::",
            stringify!(result_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_try_catch_element {
    pub try_op: u32,
    pub catch_op: u32,
    pub finally_op: u32,
    pub finally_end: u32,
}
#[test]
fn bindgen_test_layout__zend_try_catch_element() {
    assert_eq!(
        ::std::mem::size_of::<_zend_try_catch_element>(),
        16usize,
        concat!("Size of: ", stringify!(_zend_try_catch_element))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_try_catch_element>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_try_catch_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_try_catch_element>())).try_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(try_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).catch_op as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(catch_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).finally_op as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_try_catch_element>())).finally_end as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_try_catch_element),
            "::",
            stringify!(finally_end)
        )
    );
}
pub type zend_try_catch_element = _zend_try_catch_element;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_live_range {
    pub var: u32,
    pub start: u32,
    pub end: u32,
}
#[test]
fn bindgen_test_layout__zend_live_range() {
    assert_eq!(
        ::std::mem::size_of::<_zend_live_range>(),
        12usize,
        concat!("Size of: ", stringify!(_zend_live_range))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_live_range>(),
        4usize,
        concat!("Alignment of ", stringify!(_zend_live_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).start as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_live_range>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_live_range),
            "::",
            stringify!(end)
        )
    );
}
pub type zend_live_range = _zend_live_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_arg_info {
    pub name: *const ::std::os::raw::c_char,
    pub type_: zend_type,
    pub pass_by_reference: zend_uchar,
    pub is_variadic: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_internal_arg_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_arg_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_internal_arg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_arg_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_arg_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_arg_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_arg_info>())).pass_by_reference as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(pass_by_reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_arg_info>())).is_variadic as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_arg_info),
            "::",
            stringify!(is_variadic)
        )
    );
}
pub type zend_internal_arg_info = _zend_internal_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_arg_info {
    pub name: *mut zend_string,
    pub type_: zend_type,
    pub pass_by_reference: zend_uchar,
    pub is_variadic: zend_bool,
}
#[test]
fn bindgen_test_layout__zend_arg_info() {
    assert_eq!(
        ::std::mem::size_of::<_zend_arg_info>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_arg_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_arg_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_arg_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_arg_info>())).pass_by_reference as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(pass_by_reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_arg_info>())).is_variadic as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_arg_info),
            "::",
            stringify!(is_variadic)
        )
    );
}
pub type zend_arg_info = _zend_arg_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_op_array {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
    pub cache_size: ::std::os::raw::c_int,
    pub last_var: ::std::os::raw::c_int,
    pub T: u32,
    pub last: u32,
    pub opcodes: *mut zend_op,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
    pub static_variables: *mut HashTable,
    pub vars: *mut *mut zend_string,
    pub refcount: *mut u32,
    pub last_live_range: ::std::os::raw::c_int,
    pub last_try_catch: ::std::os::raw::c_int,
    pub live_range: *mut zend_live_range,
    pub try_catch_array: *mut zend_try_catch_element,
    pub filename: *mut zend_string,
    pub line_start: u32,
    pub line_end: u32,
    pub doc_comment: *mut zend_string,
    pub last_literal: ::std::os::raw::c_int,
    pub literals: *mut zval,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_op_array() {
    assert_eq!(
        ::std::mem::size_of::<_zend_op_array>(),
        216usize,
        concat!("Size of: ", stringify!(_zend_op_array))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_op_array>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_op_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).arg_flags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).fn_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).function_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).scope as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).prototype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).num_args as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_op_array>())).required_num_args as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).arg_info as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).cache_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_var as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).T as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(T)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).opcodes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(opcodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).run_time_cache as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(run_time_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).static_variables as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(static_variables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).vars as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(vars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).refcount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_live_range as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_live_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_try_catch as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_try_catch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).live_range as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(live_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).try_catch_array as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(try_catch_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).filename as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).line_start as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).line_end as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(line_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).doc_comment as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(doc_comment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).last_literal as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(last_literal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).literals as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(literals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_op_array>())).reserved as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_op_array),
            "::",
            stringify!(reserved)
        )
    );
}
pub type zif_handler = ::std::option::Option<
    unsafe extern "C" fn(execute_data: *mut zend_execute_data, return_value: *mut zval),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_internal_function {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_internal_arg_info,
    pub handler: zif_handler,
    pub module: *mut _zend_module_entry,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_internal_function() {
    assert_eq!(
        ::std::mem::size_of::<_zend_internal_function>(),
        112usize,
        concat!("Size of: ", stringify!(_zend_internal_function))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_internal_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_internal_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).arg_flags as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).fn_flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).function_name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).scope as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).prototype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).num_args as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).required_num_args as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).arg_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).handler as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_internal_function>())).module as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_internal_function>())).reserved as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_internal_function),
            "::",
            stringify!(reserved)
        )
    );
}
pub type zend_internal_function = _zend_internal_function;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _zend_function {
    pub type_: zend_uchar,
    pub quick_arg_flags: u32,
    pub common: _zend_function__bindgen_ty_1,
    pub op_array: zend_op_array,
    pub internal_function: zend_internal_function,
    _bindgen_union_align: [u64; 27usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function__bindgen_ty_1 {
    pub type_: zend_uchar,
    pub arg_flags: [zend_uchar; 3usize],
    pub fn_flags: u32,
    pub function_name: *mut zend_string,
    pub scope: *mut zend_class_entry,
    pub prototype: *mut _zend_function,
    pub num_args: u32,
    pub required_num_args: u32,
    pub arg_info: *mut zend_arg_info,
}
#[test]
fn bindgen_test_layout__zend_function__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(_zend_function__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).arg_flags as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).fn_flags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(fn_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).function_name as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(function_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).scope as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).prototype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(prototype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).num_args as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).required_num_args as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(required_num_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function__bindgen_ty_1>())).arg_info as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function__bindgen_ty_1),
            "::",
            stringify!(arg_info)
        )
    );
}
#[test]
fn bindgen_test_layout__zend_function() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function>(),
        216usize,
        concat!("Size of: ", stringify!(_zend_function))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).quick_arg_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(quick_arg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function>())).op_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(op_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_function>())).internal_function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function),
            "::",
            stringify!(internal_function)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_execute_data {
    pub opline: *const zend_op,
    pub call: *mut zend_execute_data,
    pub return_value: *mut zval,
    pub func: *mut zend_function,
    pub This: zval,
    pub prev_execute_data: *mut zend_execute_data,
    pub symbol_table: *mut zend_array,
    pub run_time_cache: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_execute_data() {
    assert_eq!(
        ::std::mem::size_of::<_zend_execute_data>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_execute_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_execute_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_execute_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).opline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(opline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).call as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).return_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(return_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).func as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).This as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(This)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_execute_data>())).prev_execute_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(prev_execute_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_execute_data>())).symbol_table as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(symbol_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_execute_data>())).run_time_cache as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_execute_data),
            "::",
            stringify!(run_time_cache)
        )
    );
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type zend_executor_globals = _zend_executor_globals;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_stack {
    pub size: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub elements: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__zend_stack() {
    assert_eq!(
        ::std::mem::size_of::<_zend_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_stack>())).elements as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_stack),
            "::",
            stringify!(elements)
        )
    );
}
pub type zend_stack = _zend_stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_objects_store {
    pub object_buckets: *mut *mut zend_object,
    pub top: u32,
    pub size: u32,
    pub free_list_head: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__zend_objects_store() {
    assert_eq!(
        ::std::mem::size_of::<_zend_objects_store>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_objects_store))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_objects_store>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_objects_store))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_objects_store>())).object_buckets as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(object_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_objects_store>())).top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_objects_store>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_objects_store>())).free_list_head as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_objects_store),
            "::",
            stringify!(free_list_head)
        )
    );
}
pub type zend_objects_store = _zend_objects_store;
pub type fpu_control_t = ::std::os::raw::c_ushort;
pub type zend_vm_stack = *mut _zend_vm_stack;
pub type zend_ini_entry = _zend_ini_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _zend_executor_globals {
    pub uninitialized_zval: zval,
    pub error_zval: zval,
    pub symtable_cache: [*mut zend_array; 32usize],
    pub symtable_cache_limit: *mut *mut zend_array,
    pub symtable_cache_ptr: *mut *mut zend_array,
    pub symbol_table: zend_array,
    pub included_files: HashTable,
    pub bailout: *mut jmp_buf,
    pub error_reporting: ::std::os::raw::c_int,
    pub exit_status: ::std::os::raw::c_int,
    pub function_table: *mut HashTable,
    pub class_table: *mut HashTable,
    pub zend_constants: *mut HashTable,
    pub vm_stack_top: *mut zval,
    pub vm_stack_end: *mut zval,
    pub vm_stack: zend_vm_stack,
    pub vm_stack_page_size: usize,
    pub current_execute_data: *mut _zend_execute_data,
    pub fake_scope: *mut zend_class_entry,
    pub precision: zend_long,
    pub ticks_count: ::std::os::raw::c_int,
    pub persistent_constants_count: u32,
    pub persistent_functions_count: u32,
    pub persistent_classes_count: u32,
    pub in_autoload: *mut HashTable,
    pub autoload_func: *mut zend_function,
    pub full_tables_cleanup: zend_bool,
    pub no_extensions: zend_bool,
    pub vm_interrupt: zend_bool,
    pub timed_out: zend_bool,
    pub hard_timeout: zend_long,
    pub regular_list: HashTable,
    pub persistent_list: HashTable,
    pub user_error_handler_error_reporting: ::std::os::raw::c_int,
    pub user_error_handler: zval,
    pub user_exception_handler: zval,
    pub user_error_handlers_error_reporting: zend_stack,
    pub user_error_handlers: zend_stack,
    pub user_exception_handlers: zend_stack,
    pub error_handling: zend_error_handling_t,
    pub exception_class: *mut zend_class_entry,
    pub timeout_seconds: zend_long,
    pub lambda_count: ::std::os::raw::c_int,
    pub ini_directives: *mut HashTable,
    pub modified_ini_directives: *mut HashTable,
    pub error_reporting_ini_entry: *mut zend_ini_entry,
    pub objects_store: zend_objects_store,
    pub exception: *mut zend_object,
    pub prev_exception: *mut zend_object,
    pub opline_before_exception: *const zend_op,
    pub exception_op: [zend_op; 3usize],
    pub current_module: *mut _zend_module_entry,
    pub active: zend_bool,
    pub flags: zend_uchar,
    pub assertions: zend_long,
    pub ht_iterators_count: u32,
    pub ht_iterators_used: u32,
    pub ht_iterators: *mut HashTableIterator,
    pub ht_iterators_slots: [HashTableIterator; 16usize],
    pub saved_fpu_cw_ptr: *mut ::std::os::raw::c_void,
    pub saved_fpu_cw: fpu_control_t,
    pub trampoline: zend_function,
    pub call_trampoline_op: zend_op,
    pub each_deprecation_thrown: zend_bool,
    pub reserved: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout__zend_executor_globals() {
    assert_eq!(
        ::std::mem::size_of::<_zend_executor_globals>(),
        1600usize,
        concat!("Size of: ", stringify!(_zend_executor_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_executor_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_executor_globals))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).uninitialized_zval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(uninitialized_zval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_zval as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_zval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache_limit as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symtable_cache_ptr as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symtable_cache_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).symbol_table as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(symbol_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).included_files as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(included_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).bailout as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(bailout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_reporting as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exit_status as *const _ as usize
        },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exit_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).function_table as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(function_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).class_table as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(class_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).zend_constants as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(zend_constants)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack_top as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack_end as *const _ as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_stack_page_size as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_stack_page_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).current_execute_data as *const _
                as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_execute_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).fake_scope as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(fake_scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).precision as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ticks_count as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ticks_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).persistent_constants_count
                as *const _ as usize
        },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_constants_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).persistent_functions_count
                as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_functions_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).persistent_classes_count as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_classes_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).in_autoload as *const _ as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(in_autoload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).autoload_func as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(autoload_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).full_tables_cleanup as *const _
                as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(full_tables_cleanup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).no_extensions as *const _ as usize
        },
        545usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(no_extensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).vm_interrupt as *const _ as usize
        },
        546usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(vm_interrupt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).timed_out as *const _ as usize
        },
        547usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timed_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).hard_timeout as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(hard_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).regular_list as *const _ as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(regular_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).persistent_list as *const _ as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(persistent_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handler_error_reporting
                as *const _ as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler_error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handler as *const _
                as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_exception_handler as *const _
                as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handlers_error_reporting
                as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers_error_reporting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_error_handlers as *const _
                as usize
        },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_error_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).user_exception_handlers as *const _
                as usize
        },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(user_exception_handlers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_handling as *const _ as usize
        },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_handling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception_class as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).timeout_seconds as *const _ as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(timeout_seconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).lambda_count as *const _ as usize
        },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(lambda_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ini_directives as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ini_directives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).modified_ini_directives as *const _
                as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(modified_ini_directives)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).error_reporting_ini_entry as *const _
                as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(error_reporting_ini_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).objects_store as *const _ as usize
        },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(objects_store)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception as *const _ as usize
        },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).prev_exception as *const _ as usize
        },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(prev_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).opline_before_exception as *const _
                as usize
        },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(opline_before_exception)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).exception_op as *const _ as usize
        },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(exception_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).current_module as *const _ as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(current_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).active as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).flags as *const _ as usize },
        993usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).assertions as *const _ as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(assertions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_count as *const _
                as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_used as *const _
                as usize
        },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators as *const _ as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).ht_iterators_slots as *const _
                as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(ht_iterators_slots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).saved_fpu_cw_ptr as *const _ as usize
        },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(saved_fpu_cw_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).saved_fpu_cw as *const _ as usize
        },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(saved_fpu_cw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).trampoline as *const _ as usize
        },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(trampoline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).call_trampoline_op as *const _
                as usize
        },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(call_trampoline_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_executor_globals>())).each_deprecation_thrown as *const _
                as usize
        },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(each_deprecation_thrown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_executor_globals>())).reserved as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_executor_globals),
            "::",
            stringify!(reserved)
        )
    );
}
pub type zend_module_entry = _zend_module_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_entry {
    pub size: ::std::os::raw::c_ushort,
    pub zend_api: ::std::os::raw::c_uint,
    pub zend_debug: ::std::os::raw::c_uchar,
    pub zts: ::std::os::raw::c_uchar,
    pub ini_entry: *const _zend_ini_entry,
    pub deps: *const _zend_module_dep,
    pub name: *const ::std::os::raw::c_char,
    pub functions: *const _zend_function_entry,
    pub module_startup_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub module_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub request_startup_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub request_shutdown_func: ::std::option::Option<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int, module_number: ::std::os::raw::c_int)
            -> ::std::os::raw::c_int,
    >,
    pub info_func: ::std::option::Option<unsafe extern "C" fn(zend_module: *mut zend_module_entry)>,
    pub version: *const ::std::os::raw::c_char,
    pub globals_size: usize,
    pub globals_ptr: *mut ::std::os::raw::c_void,
    pub globals_ctor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub globals_dtor:
        ::std::option::Option<unsafe extern "C" fn(global: *mut ::std::os::raw::c_void)>,
    pub post_deactivate_func:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub module_started: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_uchar,
    pub handle: *mut ::std::os::raw::c_void,
    pub module_number: ::std::os::raw::c_int,
    pub build_id: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__zend_module_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_module_entry>(),
        168usize,
        concat!("Size of: ", stringify!(_zend_module_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zend_api as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_api)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zend_debug as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zend_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).zts as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(zts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).ini_entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(ini_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).deps as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(deps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).functions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_startup_func as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_startup_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_shutdown_func as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_shutdown_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).request_startup_func as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_startup_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).request_shutdown_func as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(request_shutdown_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).info_func as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(info_func)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).version as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_ptr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_ctor as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_ctor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).globals_dtor as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(globals_dtor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).post_deactivate_func as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(post_deactivate_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_started as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_started)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).type_ as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).handle as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_zend_module_entry>())).module_number as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(module_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_entry>())).build_id as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_entry),
            "::",
            stringify!(build_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_module_dep {
    pub name: *const ::std::os::raw::c_char,
    pub rel: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__zend_module_dep() {
    assert_eq!(
        ::std::mem::size_of::<_zend_module_dep>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_module_dep))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_module_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_module_dep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).rel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_module_dep>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_module_dep),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_vm_stack {
    pub top: *mut zval,
    pub end: *mut zval,
    pub prev: zend_vm_stack,
}
#[test]
fn bindgen_test_layout__zend_vm_stack() {
    assert_eq!(
        ::std::mem::size_of::<_zend_vm_stack>(),
        24usize,
        concat!("Size of: ", stringify!(_zend_vm_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_vm_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_vm_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_vm_stack>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_vm_stack),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_function_entry {
    pub fname: *const ::std::os::raw::c_char,
    pub handler: zif_handler,
    pub arg_info: *const _zend_internal_arg_info,
    pub num_args: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout__zend_function_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_function_entry>(),
        32usize,
        concat!("Size of: ", stringify!(_zend_function_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_function_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_function_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).arg_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(arg_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).num_args as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(num_args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_function_entry>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_function_entry),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _zend_ini_entry {
    pub name: *mut zend_string,
    pub on_modify: ::std::option::Option<
        unsafe extern "C" fn(
            entry: *mut zend_ini_entry,
            new_value: *mut zend_string,
            mh_arg1: *mut ::std::os::raw::c_void,
            mh_arg2: *mut ::std::os::raw::c_void,
            mh_arg3: *mut ::std::os::raw::c_void,
            stage: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub mh_arg1: *mut ::std::os::raw::c_void,
    pub mh_arg2: *mut ::std::os::raw::c_void,
    pub mh_arg3: *mut ::std::os::raw::c_void,
    pub value: *mut zend_string,
    pub orig_value: *mut zend_string,
    pub displayer: ::std::option::Option<
        unsafe extern "C" fn(ini_entry: *mut zend_ini_entry, type_: ::std::os::raw::c_int),
    >,
    pub module_number: ::std::os::raw::c_int,
    pub modifiable: u8,
    pub orig_modifiable: u8,
    pub modified: u8,
}
#[test]
fn bindgen_test_layout__zend_ini_entry() {
    assert_eq!(
        ::std::mem::size_of::<_zend_ini_entry>(),
        72usize,
        concat!("Size of: ", stringify!(_zend_ini_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<_zend_ini_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(_zend_ini_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).on_modify as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(on_modify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).mh_arg3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(mh_arg3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).value as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).orig_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).displayer as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(displayer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).module_number as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(module_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).modifiable as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).orig_modifiable as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(orig_modifiable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_zend_ini_entry>())).modified as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_zend_ini_entry),
            "::",
            stringify!(modified)
        )
    );
}
